export default class ConnectionManager {
    constructor(credentialProvider: any, appStorage: any, apiClientFactory: any, serverDiscoveryFn: any, wakeOnLan: any, appName: any, appVersion: any, deviceName: any, deviceId: any, capabilitiesFn: any, devicePixelRatio: any, localassetmanager: any, itemrepository: any, useractionrepository: any);
    appStorage: any;
    _credentialProvider: any;
    _apiClients: any[];
    _apiClientsMap: {};
    _minServerVersion: string;
    _appName: any;
    _appVersion: any;
    _deviceName: any;
    _deviceId: any;
    capabilities: any;
    apiClientFactory: any;
    wakeOnLan: any;
    serverDiscoveryFn: any;
    devicePixelRatio: any;
    localassetmanager: any;
    itemrepository: any;
    useractionrepository: any;
    appName(): any;
    appVersion(): any;
    deviceName(): any;
    deviceId(): any;
    minServerVersion(val: any): string;
    connectUser(): any;
    credentialProvider(): any;
    connectUserId(): any;
    connectToken(): any;
    getServerInfo(id: any): any;
    getLastUsedServer(): any;
    addApiClient(apiClient: any, isOnlyServer: any): void;
    clearData(): void;
    _connectUser: any;
    _getOrAddApiClient(server: any, serverUrl: any): any;
    getOrCreateApiClient(serverId: any): any;
    logout(): Promise<void>;
    getSavedServers(): any;
    getAvailableServers(): Promise<any>;
    connectToServers(servers: any, options: any): any;
    connectToServer(server: any, options: any): any;
    connectToAddress(address: any, options: any): any;
    loginToConnect(username: any, password: any): Promise<any>;
    signupForConnect(options: any): Promise<any>;
    getUserInvitations(): Promise<any>;
    deleteServer(serverId: any): Promise<void>;
    rejectServer(serverId: any): Promise<Response>;
    acceptServer(serverId: any): Promise<any>;
    resetRegistrationInfo(apiClient: any): void;
    getRegistrationInfo(feature: any, apiClient: any, options: any): Promise<void>;
    createPin(): Promise<any>;
    getPinStatus(pinInfo: any): Promise<any>;
    exchangePin(pinInfo: any): Promise<void>;
    connect(options: any): Promise<any>;
    handleMessageReceived(msg: any): void;
    onNetworkChanged(): void;
    onAppResume(): void;
    isLoggedIntoConnect(): boolean;
    getApiClients(): any[];
    getApiClient(item: any): any;
    getEmbyServerUrl(baseUrl: any, handler: any): string;
}
